---
name: Build

on:
  push:
    branches-ignore:
      - 'l10n_master'
      - 'gh-pages'
  workflow_dispatch:

jobs:
  cloc:
    name: CLOC
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Install cloc
        run: |
          sudo apt-get update
          sudo apt-get -y install cloc

      - name: Print lines of code
        run: cloc --include-lang CSS,JavaScript,XML,Python --vcs git


  build-artifacts:
    name: Build artifacts
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Print environment
        run: |
          dotnet --info
          echo "GitHub ref: $GITHUB_REF"
          echo "GitHub event: $GITHUB_EVENT"

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.7
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # 4.7.1
        with:
          python-version: '3.7'
          cache: 'poetry'

      - name: Pull dependencies
        run: |
          poetry install --with dev
          poetry self add poetry-plugin-export
          mkdir package/lib
          poetry export -f requirements.txt --output package/lib/requirements.txt

      - name: Build Splunk App
        run: |
          poetry shell
          mkdir package/bin
          cp -R src/* package/bin/
          ucc-gen build --ta-version 2.0.0
          ucc-gen package --path output/bitwarden_event_logs -o output/

      - name: Validate artifact
        run: |
          wget https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-1.0.1.tar.gz
          pip install splunk-packaging-toolkit-1.0.1.tar.gz
          echo "****************************************"
          slim validate output/bitwarden_event_logs-2.0.0.tar.gz 2>&1 | tee output.txt
          echo "****************************************"
          if grep -q "\[WARNING\]" "output.txt"; then
            echo "WARNING(s) found."
            exit 1
          elif grep -q "\[ERROR\]" "output.txt"; then
            echo "ERROR(s) found."
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: bitwarden_event_logs-2.0.0.tar.gz
          path: bitwarden_event_logs-2.0.0.tar.gz
          if-no-files-found: error


  check-failures:
    name: Check for failures
    if: always()
    runs-on: ubuntu-22.04
    needs:
      - cloc
      - build-artifacts
    steps:
      - name: Check if any job failed
        if: |
          github.ref == 'refs/heads/main'
          || github.ref == 'refs/heads/rc'
          || github.ref == 'refs/heads/hotfix-rc'
        env:
          CLOC_STATUS: ${{ needs.cloc.result }}
          BUILD_ARTIFACTS_STATUS: ${{ needs.build-artifacts.result }}
        run: |
          if [[ "$CLOC_STATUS" = "failure" || "$BUILD_ARTIFACTS_STATUS" = "failure" ]]; then
            exit 1
          fi

      - name: Login to Azure - CI subscription
        uses: Azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2 # v1.4.7
        if: failure()
        with:
          creds: ${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL }}

      - name: Retrieve secrets
        id: retrieve-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        if: failure()
        with:
          keyvault: "bitwarden-ci"
          secrets: "devops-alerts-slack-webhook-url"

      - name: Notify Slack on failure
        uses: act10ns/slack@da3191ebe2e67f49b46880b4633f5591a96d1d33 # v2.0.0
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ steps.retrieve-secrets.outputs.devops-alerts-slack-webhook-url }}
        with:
          status: ${{ job.status }}
